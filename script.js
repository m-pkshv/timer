document.addEventListener('DOMContentLoaded', function() {
    // DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
    const elements = {
        timerList: document.getElementById('timerList'),
        addTimerBtn: document.getElementById('addTimerBtn'),
        display: document.getElementById('display'),
        progressInfo: document.getElementById('progressInfo'),
        startBtn: document.getElementById('startBtn'),
        pauseBtn: document.getElementById('pauseBtn'),
        resetBtn: document.getElementById('resetBtn'),
        cyclesInput: document.getElementById('cyclesInput'),
        cyclesMinusBtn: document.getElementById('cyclesMinusBtn'),
        cyclesPlusBtn: document.getElementById('cyclesPlusBtn'),
        totalTimeDisplay: document.getElementById('totalTimeDisplay'),
        lightThemeBtn: document.getElementById('lightThemeBtn'),
        darkThemeBtn: document.getElementById('darkThemeBtn'),
        systemThemeBtn: document.getElementById('systemThemeBtn'),
        menuBtn: document.getElementById('menuBtn'),
        menuDropdown: document.getElementById('menuDropdown'),
        overlay: document.getElementById('overlay'),
        currentTimerProgress: document.getElementById('currentTimerProgress'),
        totalTimeProgress: document.getElementById('totalTimeProgress')
    };
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    const progressElements = {
        currentCircle: elements.currentTimerProgress.querySelector('.progress-circle-current'),
        totalCircle: elements.totalTimeProgress.querySelector('.progress-circle-total'),
        currentCircumference: parseFloat(elements.currentTimerProgress.querySelector('.progress-circle-current').getAttribute('stroke-dasharray')),
        totalCircumference: parseFloat(elements.totalTimeProgress.querySelector('.progress-circle-total').getAttribute('stroke-dasharray'))
    };
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const state = {
        timers: [],
        currentTimerIndex: 0,
        currentRepetition: 0,
        currentCycle: 0,
        totalCycles: 1,
        remainingSeconds: 0,
        totalTimeSeconds: 0,
        elapsedTimeSeconds: 0,
        remainingTotalSeconds: 0,
        initialTimerDuration: 0, // –ù–∞—á–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        timerInterval: null,
        isPaused: false,
        isDarkTheme: false,
        audioContext: null,
        themeMode: 'system' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É
    };
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const utils = {
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ü–≤–µ—Ç–∞–º–∏
        interpolateColor(color1, color2, factor) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º hex —Ü–≤–µ—Ç–∞ –≤ RGB
            const r1 = parseInt(color1.substring(1, 3), 16);
            const g1 = parseInt(color1.substring(3, 5), 16);
            const b1 = parseInt(color1.substring(5, 7), 16);
            
            const r2 = parseInt(color2.substring(1, 3), 16);
            const g2 = parseInt(color2.substring(3, 5), 16);
            const b2 = parseInt(color2.substring(5, 7), 16);
            
            // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
            const r = Math.round(r1 + factor * (r2 - r1));
            const g = Math.round(g1 + factor * (g2 - g1));
            const b = Math.round(b1 + factor * (b2 - b1));
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ hex
            return `rgb(${r}, ${g}, ${b})`;
        },
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ –æ–±—ä–µ–∫—Ç —Å —á–∞—Å–∞–º–∏, –º–∏–Ω—É—Ç–∞–º–∏ –∏ —Å–µ–∫—É–Ω–¥–∞–º–∏
        secondsToTimeObject(totalSeconds) {
            const hours = Math.floor(totalSeconds / 3600);
            const minutes = Math.floor((totalSeconds % 3600) / 60);
            const seconds = totalSeconds % 60;
            
            return {
                hours,
                minutes,
                seconds
            };
        },

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ —á—á:–º–º:—Å—Å
        formatTimeObject(timeObj) {
            return `${timeObj.hours.toString().padStart(2, '0')}:${timeObj.minutes.toString().padStart(2, '0')}:${timeObj.seconds.toString().padStart(2, '0')}`;
        },

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Ñ–æ—Ä–º–∞—Ç–∞ —á—á:–º–º:—Å—Å –≤ —Å–µ–∫—É–Ω–¥—ã
        timeStringToSeconds(timeString) {
            // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            const parts = timeString.split(':');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É –Ω–∞—Å –µ—Å—Ç—å
            let hours = 0, minutes = 0, seconds = 0;
            
            if (parts.length === 3) {
                // –§–æ—Ä–º–∞—Ç —á—á:–º–º:—Å—Å
                hours = parseInt(parts[0]) || 0;
                minutes = parseInt(parts[1]) || 0;
                seconds = parseInt(parts[2]) || 0;
            } else if (parts.length === 2) {
                // –§–æ—Ä–º–∞—Ç –º–º:—Å—Å
                minutes = parseInt(parts[0]) || 0;
                seconds = parseInt(parts[1]) || 0;
            } else if (parts.length === 1) {
                // –¢–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥—ã
                seconds = parseInt(parts[0]) || 0;
            }
            
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—ë –≤ —Å–µ–∫—É–Ω–¥—ã
            return hours * 3600 + minutes * 60 + seconds;
        },

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
        handleTimeInputChange(input, onChangeCallback) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            let timeString = input.value;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É —á—á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å –∏–ª–∏ —Å—Å
            const timePattern = /^(\d{0,2}:)?(\d{0,2}:)?(\d{0,2})$/;
            
            if (!timePattern.test(timeString)) {
                // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                input.value = input.dataset.lastValidValue || '00:00:00';
                return;
            }
            
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ–ø–æ–ª–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '5:'), –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
            const parts = timeString.split(':');
            if (parts.length < 3) {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–∞—Å—Ç–∏
                while (parts.length < 3) {
                    parts.unshift('00');
                }
                timeString = parts.join(':');
            }
            
            // –ü—Ä–∏–≤–æ–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ –¥–≤—É–∑–Ω–∞—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            const formattedParts = parts.map(part => part.padStart(2, '0'));
            const formattedTime = formattedParts.join(':');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ
            input.value = formattedTime;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            input.dataset.lastValidValue = formattedTime;
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã –∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫
            const seconds = this.timeStringToSeconds(formattedTime);
            if (onChangeCallback) {
                onChangeCallback(seconds);
            }
        }
    };
    
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º
    const soundManager = {
        updateButtonState(button, isEnabled) {
            if (isEnabled) {
                button.textContent = 'üîî'; // Bell emoji (U+1F514)
                button.title = '–ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω';
            } else {
                button.textContent = 'üîï'; // Bell with slash emoji (U+1F515)
                button.title = '–ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω';
            }
        },
        
        playBeep() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∑–≤—É–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
            if (!state.timers[state.currentTimerIndex].soundEnabled) {
                return;
            }
            
            try {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–≤—É–∫–µ
                if (!state.audioContext) {
                    state.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞ –¥–ª—è –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                const oscillator = state.audioContext.createOscillator();
                const gainNode = state.audioContext.createGain();
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤—É–∫–∞
                oscillator.type = 'sine';
                oscillator.frequency.setValueAtTime(880, state.audioContext.currentTime);
                
                // –ì—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞
                gainNode.gain.setValueAtTime(0.5, state.audioContext.currentTime);
                
                // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∑–ª–æ–≤
                oscillator.connect(gainNode);
                gainNode.connect(state.audioContext.destination);
                
                // –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤—É–∫–∞ —á–µ—Ä–µ–∑ 0.3 —Å–µ–∫—É–Ω–¥—ã
                oscillator.start();
                oscillator.stop(state.audioContext.currentTime + 0.3);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', e);
            }
        }
    };
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
    const progressManager = {
        updateCurrentTimer(percentage) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            const offset = progressElements.currentCircumference * (1 - percentage);
            progressElements.currentCircle.style.strokeDashoffset = offset;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            // –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –æ—Ç –∑–µ–ª–µ–Ω–æ–≥–æ –∫ –æ—Ä–∞–Ω–∂–µ–≤–æ–º—É, –∞ –∑–∞—Ç–µ–º –∫ –∫—Ä–∞—Å–Ω–æ–º—É
            let color;
            
            if (percentage > 0.66) {
                // –û—Ç 100% –¥–æ 66% - –∑–µ–ª–µ–Ω—ã–π
                color = getComputedStyle(document.documentElement).getPropertyValue('--progress-green');
            } else if (percentage > 0.33) {
                // –û—Ç 66% –¥–æ 33% - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ—Ç –∑–µ–ª–µ–Ω–æ–≥–æ –∫ –æ—Ä–∞–Ω–∂–µ–≤–æ–º—É
                const greenColor = getComputedStyle(document.documentElement).getPropertyValue('--progress-green').trim();
                const orangeColor = getComputedStyle(document.documentElement).getPropertyValue('--progress-orange').trim();
                const normalizedPercentage = (percentage - 0.33) / 0.33; // –æ—Ç 0 –¥–æ 1
                color = utils.interpolateColor(orangeColor, greenColor, normalizedPercentage);
            } else if (percentage > 0) {
                // –û—Ç 33% –¥–æ 0% - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –æ—Ç –æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ –∫ –∫—Ä–∞—Å–Ω–æ–º—É
                const orangeColor = getComputedStyle(document.documentElement).getPropertyValue('--progress-orange').trim();
                const redColor = getComputedStyle(document.documentElement).getPropertyValue('--progress-red').trim();
                const normalizedPercentage = percentage / 0.33; // –æ—Ç 0 –¥–æ 1
                color = utils.interpolateColor(redColor, orangeColor, normalizedPercentage);
            } else {
                // 0% - –∫—Ä–∞—Å–Ω—ã–π
                color = getComputedStyle(document.documentElement).getPropertyValue('--progress-red');
            }
            
            progressElements.currentCircle.style.stroke = color;
        },
        
        updateTotalTime(percentage) {
            const offset = progressElements.totalCircumference * (1 - percentage);
            progressElements.totalCircle.style.strokeDashoffset = offset;
        },
        
        reset() {
            progressElements.currentCircle.style.strokeDashoffset = 0;
            progressElements.totalCircle.style.strokeDashoffset = 0;
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π
            progressElements.currentCircle.style.stroke = getComputedStyle(document.documentElement).getPropertyValue('--progress-green');
        }
    };
    
    // –§—É–Ω–∫—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞
    const timer = {
        start() {
            if (state.timers.length === 0) {
                alert('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä!');
                return;
            }
            
            if (state.isPaused) {
                state.isPaused = false;
            } else {
                state.currentTimerIndex = 0;
                state.currentRepetition = 1;
                state.currentCycle = 1;
                state.remainingSeconds = state.timers[state.currentTimerIndex].duration;
                state.initialTimerDuration = state.timers[state.currentTimerIndex].duration; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                state.elapsedTimeSeconds = 0;
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —á–∏—Å–ª–æ
                state.totalCycles = parseInt(elements.cyclesInput.value) || 1;
                
                // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–µ–µ –≤—Ä–µ–º—è
                state.totalTimeSeconds = timer.calculateTotalSeconds();
                state.remainingTotalSeconds = state.totalTimeSeconds;
                
                // –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                progressManager.reset();
                
                // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
                timer.updateActiveTimer();
            }
            
            elements.startBtn.disabled = true;
            elements.pauseBtn.disabled = false;
            
            // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            state.timerInterval = setInterval(timer.update, 1000);
            timer.updateDisplay();
        },
        
        pause() {
            clearInterval(state.timerInterval);
            state.isPaused = true;
            elements.startBtn.disabled = false;
            elements.pauseBtn.disabled = true;
            elements.progressInfo.innerHTML = '<div>–¢–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ</div>';
        },
        
        reset() {
            clearInterval(state.timerInterval);
            state.currentTimerIndex = 0;
            state.currentRepetition = 0;
            state.currentCycle = 0;
            state.remainingSeconds = 0;
            state.elapsedTimeSeconds = 0;
            state.remainingTotalSeconds = 0;
            state.isPaused = false;
            elements.startBtn.disabled = false;
            elements.pauseBtn.disabled = true;
            elements.display.textContent = '00:00';
            elements.progressInfo.innerHTML = '<div>–¢–∞–π–º–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω</div>';
            
            // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
            progressManager.reset();
            
            // –°–±—Ä–æ—Å –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤
            const timerContainers = document.querySelectorAll('.timer-container');
            timerContainers.forEach(container => {
                container.style.backgroundColor = 'var(--container-bg)';
            });
        },
        
        update() {
            state.remainingSeconds--;
            state.elapsedTimeSeconds++;
            state.remainingTotalSeconds--;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
            if (state.initialTimerDuration > 0) {
                const currentPercentage = state.remainingSeconds / state.initialTimerDuration;
                progressManager.updateCurrentTimer(currentPercentage);
            }
            
            if (state.totalTimeSeconds > 0) {
                const totalPercentage = state.remainingTotalSeconds / state.totalTimeSeconds;
                progressManager.updateTotalTime(totalPercentage);
            }
            
            if (state.remainingSeconds <= 0) {
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                soundManager.playBeep();
                
                // –ü–æ–∫–∞–∑–∞—Ç—å 00:00 –Ω–∞ –¥–∏—Å–ø–ª–µ–µ
                elements.display.textContent = '00:00';
                
                // –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                clearInterval(state.timerInterval);
                
                setTimeout(function() {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é –∏–ª–∏ —Ç–∞–π–º–µ—Ä—É
                    if (state.currentRepetition < state.timers[state.currentTimerIndex].repetitions) {
                        // –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
                        state.currentRepetition++;
                        state.remainingSeconds = state.timers[state.currentTimerIndex].duration;
                        state.initialTimerDuration = state.remainingSeconds; // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
                        progressManager.updateCurrentTimer(1);
                    } else {
                        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–∞–π–º–µ—Ä—É
                        state.currentTimerIndex++;
                        state.currentRepetition = 1;
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
                        if (state.currentTimerIndex >= state.timers.length) {
                            state.currentTimerIndex = 0;
                            state.currentCycle++;
                            
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –≤—Å–µ —Ü–∏–∫–ª—ã
                            if (state.currentCycle > state.totalCycles) {
                                elements.progressInfo.innerHTML = `<div>–û–±—â–µ–µ –≤—Ä–µ–º—è: ${timer.formatTime(state.elapsedTimeSeconds)} / ${timer.formatTime(state.totalTimeSeconds)}</div>
                                <div>–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ —Ü–∏–∫–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!</div>`;
                                elements.startBtn.disabled = false;
                                elements.pauseBtn.disabled = true;
                                return;
                            }
                        }
                        
                        state.remainingSeconds = state.timers[state.currentTimerIndex].duration;
                        state.initialTimerDuration = state.remainingSeconds; // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º–µ—Ä–∞
                        progressManager.updateCurrentTimer(1);
                        
                        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
                        timer.updateActiveTimer();
                    }
                    
                    // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    timer.updateDisplay();
                    state.timerInterval = setInterval(timer.update, 1000);
                }, 1000);
            } else {
                timer.updateDisplay();
            }
        },
        
        updateDisplay() {
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            const minutes = Math.floor(state.remainingSeconds / 60);
            const seconds = state.remainingSeconds % 60;
            elements.display.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            if (state.timers.length > 0) {
                elements.progressInfo.innerHTML = `
                    <div>–û–±—â–µ–µ –≤—Ä–µ–º—è: ${timer.formatTime(state.elapsedTimeSeconds)} / ${timer.formatTime(state.remainingTotalSeconds)}</div>
                    <div>–¢–∞–π–º–µ—Ä ${state.currentTimerIndex + 1} –∏–∑ ${state.timers.length}, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ${state.currentRepetition} –∏–∑ ${state.timers[state.currentTimerIndex].repetitions}, —Ü–∏–∫–ª ${state.currentCycle} –∏–∑ ${state.totalCycles}</div>
                `;
            }
        },
        
        formatTime(totalSeconds) {
            const timeObj = utils.secondsToTimeObject(totalSeconds);
            
            if (timeObj.hours > 0) {
                return utils.formatTimeObject(timeObj);
            } else {
                return `${timeObj.minutes.toString().padStart(2, '0')}:${timeObj.seconds.toString().padStart(2, '0')}`;
            }
        },
        
        updateActiveTimer() {
            const timerContainers = document.querySelectorAll('.timer-container');
            timerContainers.forEach((container, index) => {
                if (index === state.currentTimerIndex) {
                    container.style.backgroundColor = 'var(--active-timer)';
                } else {
                    container.style.backgroundColor = 'var(--container-bg)';
                }
            });
        },
        
        calculateTotalSeconds() {
            // –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            let totalSeconds = 0;
            for (const timer of state.timers) {
                totalSeconds += (parseInt(timer.duration) || 0) * (parseInt(timer.repetitions) || 1);
            }
            
            // –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
            const cycles = parseInt(elements.cyclesInput.value) || 1;
            return totalSeconds * cycles;
        },
        
        updateTotalTime() {
            if (state.timers.length === 0) {
                elements.totalTimeDisplay.textContent = '00:00';
                return;
            }
            
            const totalSeconds = timer.calculateTotalSeconds();
            elements.totalTimeDisplay.textContent = timer.formatTime(totalSeconds);
        }
    };
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
    const timerManager = {
        add(duration = 30, repetitions = 1) {
            const timerIndex = state.timers.length;
            
            const timerContainer = document.createElement('div');
            timerContainer.className = 'timer-container';
            timerContainer.dataset.index = timerIndex;
            
            const timerRow = document.createElement('div');
            timerRow.className = 'timer-row';
            
            // –í—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞
            const durationGroup = document.createElement('div');
            durationGroup.className = 'input-group with-buttons';
            
            const durationLabel = document.createElement('label');
            durationLabel.textContent = '–í—Ä–µ–º—è (—á—á:–º–º:—Å—Å):';
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–æ–∫ + –∏ -
            const durationInputWrapper = document.createElement('div');
            durationInputWrapper.className = 'input-with-buttons';
            
            // –ö–Ω–æ–ø–∫–∞ –º–∏–Ω—É—Å
            const minusBtn = document.createElement('button');
            minusBtn.className = 'btn-adjust btn-minus';
            minusBtn.textContent = '-';
            minusBtn.title = '–£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥';
            minusBtn.addEventListener('click', function() {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                const currentSeconds = state.timers[timerIndex].duration;
                const newValue = Math.max(1, currentSeconds - 10); // –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                state.timers[timerIndex].duration = newValue;
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —á—á:–º–º:—Å—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
                const timeObj = utils.secondsToTimeObject(newValue);
                durationInput.value = utils.formatTimeObject(timeObj);
                durationInput.dataset.lastValidValue = durationInput.value;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
                timer.updateTotalTime();
            });
            
            const durationInput = document.createElement('input');
            durationInput.type = 'text';
            durationInput.placeholder = '00:00:00';
            durationInput.pattern = '[0-9]{2}:[0-9]{2}:[0-9]{2}';
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º:—Å—Å
            const initialTimeObj = utils.secondsToTimeObject(duration);
            durationInput.value = utils.formatTimeObject(initialTimeObj);
            durationInput.dataset.lastValidValue = durationInput.value;
            
            durationInput.addEventListener('input', function() {
                utils.handleTimeInputChange(this, (seconds) => {
                    state.timers[timerIndex].duration = seconds;
                    timer.updateTotalTime();
                });
            });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
            durationInput.addEventListener('focus', function() {
                // –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                this.select(); // –í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            });
            
            durationInput.addEventListener('blur', function() {
                // –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                utils.handleTimeInputChange(this, (seconds) => {
                    state.timers[timerIndex].duration = seconds;
                    timer.updateTotalTime();
                });
            });
            
            // –ö–Ω–æ–ø–∫–∞ –ø–ª—é—Å
            const plusBtn = document.createElement('button');
            plusBtn.className = 'btn-adjust btn-plus';
            plusBtn.textContent = '+';
            plusBtn.title = '–£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 10 —Å–µ–∫—É–Ω–¥';
            plusBtn.addEventListener('click', function() {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                const currentSeconds = state.timers[timerIndex].duration;
                const newValue = currentSeconds + 10;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                state.timers[timerIndex].duration = newValue;
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —á—á:–º–º:—Å—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
                const timeObj = utils.secondsToTimeObject(newValue);
                durationInput.value = utils.formatTimeObject(timeObj);
                durationInput.dataset.lastValidValue = durationInput.value;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è
                timer.updateTotalTime();
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            durationInputWrapper.appendChild(minusBtn);
            durationInputWrapper.appendChild(durationInput);
            durationInputWrapper.appendChild(plusBtn);
            
            durationGroup.appendChild(durationLabel);
            durationGroup.appendChild(durationInputWrapper);
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            const repetitionsGroup = document.createElement('div');
            repetitionsGroup.className = 'input-group with-buttons';
            
            const repetitionsLabel = document.createElement('label');
            repetitionsLabel.textContent = '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:';
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–æ–∫ + –∏ -
            const repetitionsInputWrapper = document.createElement('div');
            repetitionsInputWrapper.className = 'input-with-buttons';
            
            // –ö–Ω–æ–ø–∫–∞ –º–∏–Ω—É—Å
            const repMinusBtn = document.createElement('button');
            repMinusBtn.className = 'btn-adjust btn-minus';
            repMinusBtn.textContent = '-';
            repMinusBtn.title = '–£–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 1 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ';
            repMinusBtn.addEventListener('click', function() {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–µ–º 1
                const currentValue = parseInt(repetitionsInput.value) || 0;
                const newValue = Math.max(1, currentValue - 1); // –ú–∏–Ω–∏–º—É–º 1 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                repetitionsInput.value = newValue;
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–∞
                repetitionsInput.dispatchEvent(new Event('input'));
            });
            
            const repetitionsInput = document.createElement('input');
            repetitionsInput.type = 'number';
            repetitionsInput.min = '1';
            repetitionsInput.value = repetitions;
            repetitionsInput.addEventListener('input', function() {
                const newRepetitions = parseInt(this.value) || 1;
                state.timers[timerIndex].repetitions = newRepetitions;
                timer.updateTotalTime();
            });
            
            // –ö–Ω–æ–ø–∫–∞ –ø–ª—é—Å
            const repPlusBtn = document.createElement('button');
            repPlusBtn.className = 'btn-adjust btn-plus';
            repPlusBtn.textContent = '+';
            repPlusBtn.title = '–£–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 1 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ';
            repPlusBtn.addEventListener('click', function() {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 1
                const currentValue = parseInt(repetitionsInput.value) || 0;
                const newValue = currentValue + 1;
                repetitionsInput.value = newValue;
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ input –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–∞
                repetitionsInput.dispatchEvent(new Event('input'));
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            repetitionsInputWrapper.appendChild(repMinusBtn);
            repetitionsInputWrapper.appendChild(repetitionsInput);
            repetitionsInputWrapper.appendChild(repPlusBtn);
            
            repetitionsGroup.appendChild(repetitionsLabel);
            repetitionsGroup.appendChild(repetitionsInputWrapper);
            
            // –ö–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            const timerActions = document.createElement('div');
            timerActions.className = 'timer-actions';
            
            // –ö–Ω–æ–ø–∫–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            const soundBtn = document.createElement('button');
            soundBtn.className = 'btn-sound';
            soundBtn.textContent = 'üîï'; // Bell with slash emoji (U+1F515)
            soundBtn.title = '–ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω';
            soundBtn.addEventListener('click', function() {
                state.timers[timerIndex].soundEnabled = !state.timers[timerIndex].soundEnabled;
                soundManager.updateButtonState(soundBtn, state.timers[timerIndex].soundEnabled);
            });
            
            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'btn-delete';
            deleteBtn.textContent = '–£–¥–∞–ª–∏—Ç—å';
            deleteBtn.addEventListener('click', function() {
                timerManager.remove(timerIndex);
            });
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            timerRow.appendChild(durationGroup);
            timerRow.appendChild(repetitionsGroup);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            timerActions.appendChild(soundBtn);
            timerActions.appendChild(deleteBtn);
            timerRow.appendChild(timerActions);
            
            timerContainer.appendChild(timerRow);
            
            elements.timerList.appendChild(timerContainer);
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –≤ –º–∞—Å—Å–∏–≤
            state.timers.push({
                duration: duration,
                repetitions: repetitions,
                soundEnabled: false
            });
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            timerManager.updateIndexes();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            timer.updateTotalTime();
        },
        
        remove(index) {
            // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ DOM
            const timerContainers = document.querySelectorAll('.timer-container');
            if (timerContainers[index]) {
                timerContainers[index].remove();
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
            state.timers.splice(index, 1);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            timerManager.updateIndexes();
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            timer.updateTotalTime();
            
            // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
            timer.reset();
        },
        
        updateIndexes() {
            const timerContainers = document.querySelectorAll('.timer-container');
            timerContainers.forEach((container, index) => {
                container.dataset.index = index;
            });
        }
    };
    
    // –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é
    const menuManager = {
        isOpen: false,
        
        toggle() {
            this.isOpen = !this.isOpen;
            
            if (this.isOpen) {
                elements.menuBtn.classList.add('active');
                elements.menuDropdown.classList.add('visible');
                elements.overlay.classList.add('visible');
            } else {
                elements.menuBtn.classList.remove('active');
                elements.menuDropdown.classList.remove('visible');
                elements.overlay.classList.remove('visible');
            }
        },
        
        close() {
            if (this.isOpen) {
                this.isOpen = false;
                elements.menuBtn.classList.remove('active');
                elements.menuDropdown.classList.remove('visible');
                elements.overlay.classList.remove('visible');
            }
        }
    };
    
    // –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–æ–π
    const themeManager = {
        init() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –≤ localStorage
            const savedTheme = localStorage.getItem('theme');
            const themeMode = localStorage.getItem('theme-mode');
            
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —É–∫–∞–∑–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (!themeMode) {
                localStorage.setItem('theme-mode', 'system');
                this.setSystemTheme(false);
            } else if (themeMode === 'system') {
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞
                this.setSystemTheme(false);
            } else if (savedTheme) {
                // –ï—Å–ª–∏ –≤ localStorage –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Ç–µ–º–∞ (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)
                if (savedTheme === 'dark') {
                    document.body.classList.add('dark-theme');
                    state.isDarkTheme = true;
                } else {
                    document.body.classList.remove('dark-theme');
                    state.isDarkTheme = false;
                }
                document.documentElement.setAttribute('data-theme', state.isDarkTheme ? 'dark' : 'light');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
                // –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º
                if (localStorage.getItem('theme-mode') === 'system') {
                    this.applySystemTheme();
                    console.log('–°–∏—Å—Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', e.matches ? '—Ç—ë–º–Ω—É—é' : '—Å–≤–µ—Ç–ª—É—é');
                }
            });
            
            this.updateActiveButtons();
        },
        
        applySystemTheme() {
            const prefersDarkTheme = window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            if (prefersDarkTheme) {
                document.body.classList.add('dark-theme');
                state.isDarkTheme = true;
            } else {
                document.body.classList.remove('dark-theme');
                state.isDarkTheme = false;
            }
            
            document.documentElement.setAttribute('data-theme', state.isDarkTheme ? 'dark' : 'light');
            this.updateActiveButtons();
        },
        
        setLightTheme() {
            document.body.classList.remove('dark-theme');
            localStorage.setItem('theme', 'light');
            localStorage.setItem('theme-mode', 'manual');
            state.isDarkTheme = false;
            document.documentElement.setAttribute('data-theme', 'light');
            this.updateActiveButtons();
        },
        
        setDarkTheme() {
            document.body.classList.add('dark-theme');
            localStorage.setItem('theme', 'dark');
            localStorage.setItem('theme-mode', 'manual');
            state.isDarkTheme = true;
            document.documentElement.setAttribute('data-theme', 'dark');
            this.updateActiveButtons();
        },
        
        setSystemTheme(updateStorage = true) {
            if (updateStorage) {
                localStorage.setItem('theme-mode', 'system');
            }
            this.applySystemTheme();
        },
        
        updateActiveButtons() {
            // –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –∫–ª–∞—Å—Å active —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
            elements.lightThemeBtn.classList.remove('active');
            elements.darkThemeBtn.classList.remove('active');
            elements.systemThemeBtn.classList.remove('active');
            
            // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º active –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–µ
            const themeMode = localStorage.getItem('theme-mode');
            
            if (themeMode === 'system') {
                elements.systemThemeBtn.classList.add('active');
            } else {
                if (state.isDarkTheme) {
                    elements.darkThemeBtn.classList.add('active');
                } else {
                    elements.lightThemeBtn.classList.add('active');
                }
            }
        }
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    function init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
        themeManager.init();
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        elements.addTimerBtn.addEventListener('click', () => timerManager.add());
        elements.startBtn.addEventListener('click', timer.start);
        elements.pauseBtn.addEventListener('click', timer.pause);
        elements.resetBtn.addEventListener('click', timer.reset);
        elements.cyclesInput.addEventListener('input', timer.updateTotalTime);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ + –∏ - –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤
        elements.cyclesMinusBtn.addEventListener('click', function() {
            const currentValue = parseInt(elements.cyclesInput.value) || 1;
            const newValue = Math.max(1, currentValue - 1); // –ú–∏–Ω–∏–º—É–º 1 —Ü–∏–∫–ª
            elements.cyclesInput.value = newValue;
            elements.cyclesInput.dispatchEvent(new Event('input'));
        });
        
        elements.cyclesPlusBtn.addEventListener('click', function() {
            const currentValue = parseInt(elements.cyclesInput.value) || 1;
            const newValue = currentValue + 1;
            elements.cyclesInput.value = newValue;
            elements.cyclesInput.dispatchEvent(new Event('input'));
        });
        
        elements.lightThemeBtn.addEventListener('click', () => themeManager.setLightTheme());
        elements.darkThemeBtn.addEventListener('click', () => themeManager.setDarkTheme());
        elements.systemThemeBtn.addEventListener('click', () => themeManager.setSystemTheme());
        elements.menuBtn.addEventListener('click', () => menuManager.toggle());
        elements.overlay.addEventListener('click', () => menuManager.close());
        
        // –ó–∞–∫—Ä—ã–≤–∞—Ç—å –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (!elements.menuBtn.contains(e.target) && 
                !elements.menuDropdown.contains(e.target) && 
                menuManager.isOpen) {
                menuManager.close();
            }
        });
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
        timerManager.add(30, 1);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        setTimeout(timer.updateTotalTime, 100);
    }
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init();
});